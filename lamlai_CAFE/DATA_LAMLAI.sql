CREATE DATABASE QLBH
GO

USE QLBH
GO


--FoodCategory
--Food
--Table
--Account
--BILL (1 HÓA ĐƠN CÓ NHIỀU MÓN (BILLINFO))
--BILLINFO


alter TABLE TABLEFOOD
(
	IDTABLEFOOD INT PRIMARY KEY , -- IDENTITY(1,1)
	NAME NVARCHAR(100) NOT NULL DEFAULT N'BÀN CHƯA ĐẶT TÊN',
	STATUSTABLE NVARCHAR (100) NOT NULL DEFAULT N'Trống'-- Trống || Có Người
)
GO




CREATE TABLE ACCOUNT 
(
	USERNAME NVARCHAR(100) PRIMARY KEY ,
	DISPLAYNAME NVARCHAR (100) NOT NULL ,	
	PASSWORDACCOUNT NVARCHAR(100) NOT NULL DEFAULT '0' ,
	TYPE INT NOT NULL DEFAULT 0 -- 1 ADMIN , 0 STAFF
)
GO

INSERT INTO ACCOUNT VALUES (N'b1' , N'Thien','1',0)
INSERT INTO ACCOUNT VALUES (N'a1' , N'Nhien','1',1)


select * from ACCOUNT

CREATE TABLE FOODCATEGORY 
(
	IDFOODCATEGORY INT IDENTITY(1,1) PRIMARY KEY ,
	NAMECATEGORYFOOD NVARCHAR(100) NOT NULL DEFAULT N'CHƯA ĐẶT TÊN MÓN' 
)
GO


CREATE TABLE FOOD
(
	IDFOOD INT IDENTITY(1,1) PRIMARY KEY ,
	NAMEFOOD NVARCHAR(100) NOT NULL DEFAULT N'CHƯA ĐẶT TÊN MÓN' ,
	IDFOODCATEGORY INT NOT NULL FOREIGN KEY REFERENCES FOODCATEGORY(IDFOODCATEGORY) ,
	PRICE FLOAT NOT NULL  DEFAULT 0  ,
)
GO

ALTER TABLE BILL
(
	IDBILL INT IDENTITY(1,1) PRIMARY KEY ,
	DATECHECKIN DATE NOT NULL DEFAULT GETDATE() ,
	DATECHECKOUT DATE,
	IDTABLEFOOD INT NOT NULL FOREIGN KEY REFERENCES TABLEFOOD (IDTABLEFOOD) ,
	STATUS INT NOT NULL  DEFAULT 0 , --1 LÀ ĐÃ THANH TOÁN , 0 LÀ CHƯA THANH TOÁN
	--DISCOUNT INT 
)
GO


CREATE TABLE BILLINFO
(
	IDBILLINFO INT IDENTITY(1,1) PRIMARY KEY ,
	USERNAME NVARCHAR(100) NOT NULL,
	IDBILL INT NOT NULL FOREIGN KEY REFERENCES BILL (IDBILL) ,
	IDFOOD INT NOT NULL FOREIGN KEY REFERENCES FOOD(IDFOOD) ,
	COUNTFOOD INT NOT NULL DEFAULT 0 ,

	FOREIGN KEY (USERNAME) REFERENCES ACCOUNT(USERNAME)
)
GO



create Table Store
(
	UserName NVARCHAR(100) NOT NULL,
	Material NVARCHAR(100) NOT NULL ,
	DateIn date NOT NULL DEFAULT GETDATE(),
	Dateexpired date ,--ngày hết hạn
	priceIn float NOT NULL,
	amount int NOT NULL DEFAULT 1,
	category NVARCHAR(100) 
	
	primary key (username , material , datein),
	FOREIGN KEY (username) REFERENCES dbo.account(username)
)
GO


create table salary
(
	UserName NVARCHAR(100),
	Type INT NOT NULL,
	WORKDAY int,
	restday int,
	wagelevel float,
	bonus float,

	punish float,
	total float,
	
	primary key (username , Type),
	foreign key (username) references dbo.account(username)
)
GO


CREATE PROC USP_GETACCOUNTBYUSERNAME
@USERNAME NVARCHAR(100)
AS
BEGIN
	SELECT * FROM ACCOUNT WHERE USERNAME = @USERNAME
END
GO

EXEC USP_GETACCOUNTBYUSERNAME @USERNAME = "A1" 

SELECT * FROM ACCOUNT WHERE USERNAME = N'A1' AND PASSWORDACCOUNT = '1'

CREATE STORE

DROP TABLE STORE

CREATE TABLE STORE
(
	MaterialID NVARCHAR (100) PRIMARY KEY ,
	NameMaterial NVARCHAR(100),
	RecivedDate DATETIME ,
	SupplierPrice INT ,
	Unit NVARCHAR(100),
	Quantity INT 
)

INSERT STORE VALUES ('T1',N'THỊT HEO','2023-7-15',150000,N'KG',10) ,
INSERT STORE VALUES ('T2',N'THỊT BÒ','2023-7-15',200000,N'KG',10),
INSERT STORE VALUES ('T3',N'THỊT GÀ','2023-7-15',180000,N'KG',10)

CREATE PROC GetStoreByDate  @FROMDAY DATE,@TODAY DATE
AS
	BEGIN
		SELECT * FROM STORE S
		WHERE S.RecivedDate >= @FROMDAY AND S.RecivedDate<= @TODAY
	END
GO

EXEC GetStoreByDate '2023-7-14','2023-7-15'


CREATE PROC USP_Login
@UserName NVARCHAR (100), @PassWord NVARCHAR (100)
AS
	BEGIN
	SELECT * FROM ACCOUNT WHERE USERNAME=@UserName AND PASSWORDACCOUNT=@PassWord
	END
GO

SELECT * FROM ACCOUNT WHERE USERNAME='' AND PASSWORDACCOUNT=N'' OR 1=1--


INSERT TABLEFOOD VALUES ('BAN1' , 'TRONG')


CREATE PROC USP_MANAGETABLLE @SL INT
AS
	BEGIN
	DECLARE @COUNT INT;
	SELECT @COUNT=COUNT (*) FROM TABLEFOOD WHERE STATUSTABLE = N'CONGUOI' ; --INTO @COUNT

	IF @COUNT = 0 BEGIN DELETE FROM TABLEFOOD END
	IF @COUNT > 0 BEGIN RAISERROR('Hiện tại còn bàn có người.', 16, 1); RETURN; END
	
	DECLARE @I INT = 1
	WHILE @I <= @SL
		BEGIN
		INSERT INTO TABLEFOOD (NAME) VALUES(N'BÀN ' + CAST(@I AS nvarchar(100))) 
		SET @I = @I + 1 
		END
	END
GO

EXEC USP_GETTABLELIST

CREATE PROC USP_GETTABLELIST
AS SELECT * FROM TABLEFOOD
GO

-- NGAY 23/7
-- THÊM BẢNG LOẠI THỨC ĂN
INSERT FOODCATEGORY (NAMECATEGORYFOOD) VALUES (N'HẢI SẢN' )

INSERT FOODCATEGORY (NAMECATEGORYFOOD) VALUES (N'MÓN THỊT' )

INSERT FOODCATEGORY (NAMECATEGORYFOOD) VALUES (N'MÓN CANH' )

INSERT FOODCATEGORY (NAMECATEGORYFOOD) VALUES (N'NƯỚC GIẢI KHÁT' )

--THÊM BẢNG MÓN ĂN
INSERT FOOD (NAMEFOOD,IDFOODCATEGORY,PRICE) VALUES (N'TÔM XÀO CHUA NGỌT' , 1,50000)
INSERT FOOD (NAMEFOOD,IDFOODCATEGORY,PRICE) VALUES (N'NGHÊU HẤP XẢ' , 1,70000)
INSERT FOOD (NAMEFOOD,IDFOODCATEGORY,PRICE) VALUES (N'HEO KHO CẢI CHUA' , 2,55000)
INSERT FOOD (NAMEFOOD,IDFOODCATEGORY,PRICE) VALUES (N'CANH CHUA CÁ HÚ' , 3,35000)
INSERT FOOD (NAMEFOOD,IDFOODCATEGORY,PRICE) VALUES (N'COCACOLA' , 4,15000)
INSERT FOOD (NAMEFOOD,IDFOODCATEGORY,PRICE) VALUES (N'NƯỚC CHANH' , 4,15000)


--THÊM BILL DỰA THEO BÀN
INSERT BILL (DATECHECKIN,DATECHECKOUT,IDTABLEFOOD,STATUS) VALUES (GETDATE(),NULL,47,0)
INSERT BILL (DATECHECKIN,DATECHECKOUT,IDTABLEFOOD,STATUS) VALUES (GETDATE(),GETDATE(),48,1)


--thêm billinfo 
INSERT BILLINFO (USERNAME,IDBILL,IDFOOD,COUNTFOOD) VALUES ('A1',1,4,2)
INSERT BILLINFO (USERNAME,IDBILL,IDFOOD,COUNTFOOD) VALUES ('A1',1,5,2)

INSERT BILLINFO (USERNAME,IDBILL,IDFOOD,COUNTFOOD) VALUES ('B1',2,4,2)

SELECT * FROM BILLINFO WHERE IDBILL=1 

SELECT * FROM BILL WHERE IDTABLEFOOD =47  AND STATUS = 0

USE [master]
GO
/****** Object:  Database [luongnhanvien]    Script Date: 26/07/2023 9:28:35 SA ******/
CREATE DATABASE [luongnhanvien]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'luongnhanvien', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\luongnhanvien.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'luongnhanvien_log', FILENAME = N'C:\Program Files\Microsoft SQL Server\MSSQL15.SQLEXPRESS\MSSQL\DATA\luongnhanvien_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [luongnhanvien] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [luongnhanvien].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [luongnhanvien] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [luongnhanvien] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [luongnhanvien] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [luongnhanvien] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [luongnhanvien] SET ARITHABORT OFF 
GO
ALTER DATABASE [luongnhanvien] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [luongnhanvien] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [luongnhanvien] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [luongnhanvien] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [luongnhanvien] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [luongnhanvien] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [luongnhanvien] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [luongnhanvien] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [luongnhanvien] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [luongnhanvien] SET  DISABLE_BROKER 
GO
ALTER DATABASE [luongnhanvien] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [luongnhanvien] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [luongnhanvien] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [luongnhanvien] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [luongnhanvien] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [luongnhanvien] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [luongnhanvien] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [luongnhanvien] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [luongnhanvien] SET  MULTI_USER 
GO
ALTER DATABASE [luongnhanvien] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [luongnhanvien] SET DB_CHAINING OFF 
GO
ALTER DATABASE [luongnhanvien] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [luongnhanvien] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [luongnhanvien] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [luongnhanvien] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [luongnhanvien] SET QUERY_STORE = OFF
GO
USE [luongnhanvien]
GO
/****** Object:  Table [dbo].[chamcong]    Script Date: 26/07/2023 9:28:36 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[chamcong](
	[MANHANVIEN] [nvarchar](50) NOT NULL,
	[THUHAI] [nvarchar](50) NULL,
	[THUBA] [nvarchar](50) NULL,
	[THUTU] [nvarchar](50) NULL,
	[THUNAM] [nvarchar](50) NULL,
	[THUSAU] [nvarchar](50) NULL,
	[THUBAY] [nvarchar](50) NULL,
	[CHUNHAT] [nvarchar](50) NULL,
 CONSTRAINT [PK_chamcong] PRIMARY KEY CLUSTERED 
(
	[MANHANVIEN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[luongthang]    Script Date: 26/07/2023 9:28:36 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[luongthang](
	[MANHANVIEN] [nvarchar](50) NOT NULL,
	[TENNV] [nvarchar](100) NOT NULL,
	[SOCA] [int] NOT NULL,
	[TONGTHOIGIAN] [float] NOT NULL,
	[PHAT] [nvarchar](100) NULL,
	[TONGLUONGSO] [int] NOT NULL,
	[TONGLUONGCHU] [nvarchar](100) NOT NULL,
 CONSTRAINT [PK_luongthang] PRIMARY KEY CLUSTERED 
(
	[MANHANVIEN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[nhanvien]    Script Date: 26/07/2023 9:28:36 SA ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[nhanvien](
	[MANHANVIEN] [nvarchar](50) NOT NULL,
	[TENNHANVIEN] [nvarchar](100) NOT NULL,
	[SDT] [bigint] NOT NULL,
	[EMAIL] [nvarchar](100) NOT NULL,
	[CHUCVU] [nvarchar](50) NOT NULL,
	[NAMSINH] [int] NOT NULL,
 CONSTRAINT [PK_nhanvien] PRIMARY KEY CLUSTERED 
(
	[MANHANVIEN] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[chamcong]  WITH CHECK ADD  CONSTRAINT [FK_chamcong_nhanvien] FOREIGN KEY([MANHANVIEN])
REFERENCES [dbo].[nhanvien] ([MANHANVIEN])
GO
ALTER TABLE [dbo].[chamcong] CHECK CONSTRAINT [FK_chamcong_nhanvien]
GO
ALTER TABLE [dbo].[luongthang]  WITH CHECK ADD  CONSTRAINT [FK_luongthang_luongthang] FOREIGN KEY([MANHANVIEN])
REFERENCES [dbo].[nhanvien] ([MANHANVIEN])
GO
ALTER TABLE [dbo].[luongthang] CHECK CONSTRAINT [FK_luongthang_luongthang]
GO
USE [master]
GO
ALTER DATABASE [luongnhanvien] SET  READ_WRITE 
GO

/****** Object:  Table [dbo].[ChucVu]    Script Date: 7/28/2023 10:51:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ChucVu](
	[MaChucVu] [int] NOT NULL,
	[TenChucVu] [nvarchar](50) NULL,
PRIMARY KEY CLUSTERED 
(
	[MaChucVu] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TaiKhoan]    Script Date: 7/28/2023 10:51:22 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TaiKhoan](
	[MaTaiKhoan] [nvarchar](10) NOT NULL,
	[Ten] [nvarchar](10) NULL,
	[MatKhau] [nvarchar](10) NULL,
	[MaChucVu] [int] NULL,
PRIMARY KEY CLUSTERED 
(
	[MaTaiKhoan] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[TaiKhoan]  WITH CHECK ADD  CONSTRAINT [FK_TaiKhoan_ChucVu] FOREIGN KEY([MaChucVu])
REFERENCES [dbo].[ChucVu] ([MaChucVu])
GO
ALTER TABLE [dbo].[TaiKhoan] CHECK CONSTRAINT [FK_TaiKhoan_ChucVu]
GO



create PROC USP_INSERTBILL
@IDTABLEFOOD INT
AS
	BEGIN
	INSERT INTO BILL(DATECHECKIN,DATECHECKOUT,IDTABLEFOOD,STATUS,DISCOUNT) VALUES (GETDATE(),NULL,@IDTABLEFOOD,0,0)
	END


CREATE PROC USP_InsertBillInfo
@TEN nvarchar(100),@idBill int , @idfood int , @count int
as
	BEGIN
	INSERT INTO BILLINFO VALUES(@TEN,@IDBILL,@IDFOOD,@COUNT)
	END

SELECT F.NAMEFOOD , BI.COUNTFOOD , F.PRICE,F.PRICE * BI.COUNTFOOD AS [TOTALPRICE] 
FROM BILLINFO BI ,BILL B,FOOD F WHERE BI.IDBILL=B.IDBILL AND BI.IDFOOD=F.IDFOOD AND B.idTableFood =  " + id + "and B.STATUS = 0

SELECT F.NAMEFOOD , BI.COUNTFOOD , F.PRICE,F.PRICE * BI.COUNTFOOD AS [TOTALPRICE] 
FROM BILLINFO BI ,BILL B,FOOD F WHERE BI.IDBILL=B.IDBILL AND BI.IDFOOD=F.IDFOOD AND B.idTableFood = 47 and B.STATUS = 0


select * from food where IDFOODCATEGORY = 1

create TRIGGER UTG_UPDATEBILLINFO
ON BILLINFO FOR INSERT , UPDATE
AS
	BEGIN
		DECLARE @IDBILL INT
		SELECT @IDBILL = IDBILL FROM inserted
		DECLARE @IDTABLE INT
		SELECT @IDTABLE = IDTABLEFOOD FROM BILL WHERE IDBILL=@IDBILL AND STATUS =0 --CHƯA CHECK "0"

		DECLARE @COUNT INT
		SELECT @COUNT = COUNT(*) FROM BILLINFO WHERE IDBILL = @IDBILL

		IF(@COUNT>0)
		UPDATE TABLEFOOD SET STATUSTABLE = N'CÓ NGƯỜI' WHERE IDTABLEFOOD =@IDTABLE
		ELSE
		UPDATE TABLEFOOD SET STATUSTABLE = N'Trống' WHERE IDTABLEFOOD =@IDTABLE
	END


create TRIGGER UTG_UPDATEBILL
ON BILL FOR INSERT, UPDATE 
AS
	BEGIN

	DECLARE @IDBILL INT
	SELECT @IDBILL = IDBILL FROM INSERTED
	DECLARE @IDTABLE INT
	SELECT @IDTABLE = IDTABLEFOOD FROM BILL WHERE IDBILL=@IDBILL
	DECLARE @COUNT INT =0
	SELECT @COUNT=COUNT(*) FROM BILL WHERE IDTABLEFOOD = @IDTABLE AND STATUS = 0

	IF(@COUNT = 0)
		UPDATE DBO.TableFood SET STATUSTABLE = N'Trống' WHERE IDTABLEFOOD = @IDTABLE
	END

-- Tạo Trigger khi xóa hết billinfo

CREATE TRIGGER UTG_DeleteBillInfo ON BILLINFO FOR DELETE
AS
	BEGIN
		DECLARE @IDBILLINFO INT
		DECLARE @IDBILL INT
		SELECT @IDBILLINFO=IDBILLINFO , @IDBILL=IDBILL  FROM deleted

		DECLARE @IDTABLE INT
		SELECT @IDTABLE=idTableFood FROM BILL WHERE idBill=@IDBILL

		DECLARE @COUNT INT = 0;
		SELECT @COUNT = COUNT (*) FROM BILLINFO BI , BILL B WHERE B.IDBILL = @IDBILL AND BI.IDBILL = B.IDBILL AND STATUS = 0

		IF (@COUNT=0)
			UPDATE TABLEFOOD SET STATUSTABLE = N'Trống' WHERE idTableFood = @IDTABLE
	END


SELECT F.NAMEFOOD , SUM(BI.COUNTFOOD) AS [TONGMON] , F.PRICE,F.PRICE * SUM(BI.COUNTFOOD) AS [TOTALPRICE] FROM BILLINFO BI ,BILL B, FOOD F WHERE BI.IDBILL = B.IDBILL AND BI.IDFOOD = F.IDFOOD AND B.idTableFood =47 and B.STATUS = 0 group by F.NAMEFOOD  , BI.COUNTFOOD ,  F.PRICE




--DROP TRIGGER UTG_SUMCOUNTBILLINFO
--CREATE TRIGGER UTG_SUMCOUNTBILLINFO ON BILLINFO FOR INSERT, UPDATE
--AS
--BEGIN 
--    -- Kiểm tra tồn tại trước khi cập nhật hoặc thêm mới
--    IF EXISTS (SELECT 1 FROM BILLINFO b WHERE b.IDFOOD IN (SELECT i.IDFOOD FROM inserted i))
--    BEGIN
--        -- Cập nhật COUNTFOOD cho các dòng đã tồn tại trong BILLINFO
--        UPDATE TOP (1) b
--        SET COUNTFOOD = b.COUNTFOOD + i.COUNTFOOD
--        FROM BILLINFO b
--        JOIN inserted i ON b.IDFOOD = i.IDFOOD
--        WHERE EXISTS (SELECT 1 FROM BILLINFO WHERE IDFOOD = i.IDFOOD);
--    END
--    ELSE
--    BEGIN
--        -- Thoát trigger nếu không tồn tại IDFOOD trong BILLINFO
--        RETURN;
--    END
--END


























